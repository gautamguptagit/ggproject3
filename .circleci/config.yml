version: 2.1

commands:          
  destroy-environment:
    description: For a workflowid to delete backend & frontend cloudformation stacks.
    parameters:
      # Adding the parms 
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Deleting the S3 bucket here
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force                 
            
            # Deleting both the fe and be cf stacks here
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: To revert the last migration if ran successfully in the current work-flow.
    parameters:
     
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/BpDcbSg4F8M7GxaE6ytSdz/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
         
               npm run migration:revert
  
            fi
  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend  
            npm install
            npm run build
            exit 0
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end audit
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: back-end audit
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum -y install tar gzip project3
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure that the back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt
            cat inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c1:84:ec:3f:11:24:da:80:8d:61:1c:c6:c7:ae:ee:f6"]      # ssh keys with fingerprint
      - attach_workspace:
          
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Install nvm
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    
      - run:
          name: Run migrations
          command: |
            #echo NODE_ENV=production >> ~/project/backend/.env
            echo "TYPEORM_CONNECTION = ${TYPEORM_CONNECTION}" >> ~/project/backend/.env
            echo "TYPEORM_ENTITIES = ${TYPEORM_ENTITIES}" >> ~/project/backend/.env
            echo "TYPEORM_HOST = ${TYPEORM_HOST}" >> ~/project/backend/.env
            echo "TYPEORM_PORT = ${TYPEORM_PORT}" >> ~/project/backend/.env
            echo "TYPEORM_USERNAME = ${TYPEORM_USERNAME}" >> ~/project/backend/.env
            echo "TYPEORM_PASSWORD = ${TYPEORM_PASSWORD}" >> ~/project/backend/.env
            echo "TYPEORM_DATABASE = ${TYPEORM_DATABASE}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS = ${TYPEORM_MIGRATIONS}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS_DIR = ${TYPEORM_MIGRATIONS_DIR}" >> ~/project/backend/.env
            cd ~/project/backend
            source ~/.profile
            nvm install v13.8.0
            npm install
            npm run migrations > migrations_dump.txt
      - run:

          name: Report migration results
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Migration succeeded for ${CIRCLE_WORKFLOW_ID:0:7}"
              echo "1" >> ~/project/backend/migration-results.txt
            else
              echo "Migration failed for ${CIRCLE_WORKFLOW_ID:0:7}:"
              cat ~/project/backend/migrations_dump.txt
              echo "fail" >> ~/project/backend/migration-results.txt
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migration-results.txt
      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip sudo
            # Install Nodejs
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

            # BACKEND_URL=$(curl -H "token: udapeople-cicd-BackendURL-${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/BackendURL_${CIRCLE_WORKFLOW_ID})
            # export API_URL="http://${BACKEND_URL}:3030"
            # echo "${API_URL}" >> .circleci/Backend_URL.txt
      - run:
          name: Deploy frontend objects
          command: |
            # export API_URL=$(cat .circleci/Backend_URL.txt)
            # echo "${API_URL}" > frontend/.env
            cd frontend
            npm i
            # npm install -g npm
            # npm install oauth2
            # npm install webpack
            npm run build
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      
      - image: python:3.7-alpine3.11
    steps:
      
      - checkout
      - add_ssh_keys:
            fingerprints: ["c1:84:ec:3f:11:24:da:80:8d:61:1c:c6:c7:ae:ee:f6"]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add unzip
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install ansible
          command: |
            # your code here
            apk add --update ansible
            ansible --version
      - run:
          name: Install aws
          command: |
            pip install awscli --upgrade
            aws --version
      - run:
          name: Env File
          command: |
              # echo NODE_ENV=production >> backend/.env
              echo VERSION=1 >> backend/.env
              echo TYPEORM_CONNECTION=postgres >> backend/.env
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              cat backend/.env
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            # cp package* ./dist
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            ls
            echo "mv artifac to ansibble -------"
            mv artifact.tar.gz .circleci/ansible/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


  
  
  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
            sudo apt install -y curl
            sudo apt upgrade -y
            aws --version
            # apk add curl
            # apk add nodejs npm
            # /usr/local/bin/python -m pip install --upgrade pip
            # pip install awscli --upgrade
      
      - run:
          name: Frontend smoke test.
          command: |
            # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/index.html#/employees"
            # echo " URL " $URL
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com"
              echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Successful front-end Smoke-test but failing intentionally"
              # exit 1

            else
              echo "Unsuccessful front-end Smoke-test"
              exit 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              sleep 60
              if curl "${API_URL}/api/status" | grep "ok"
              then
                echo SUCCESS
                exit 0
              else
                echo FAIL
                exit 1
              fi
      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cloudfront-update:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl
            yum -y install tar gzip
            
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            OldWorkflowID=$(aws cloudformation \
                          list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                          --no-paginate --output text | tr -d '\n')
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
                     
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --tags project=udapeople-cicd \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"  
              echo OldWorkflowID: "${OldWorkflowID}"
              echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"      
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
               echo "---deleting---"
              aws s3 rb "s3://udapeople-${OldWorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:10:7}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:10:7}"
            fi
      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only:
          #       - main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      