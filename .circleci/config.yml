version: 2.1

commands:          
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete the S3 buckets. 
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force                 
            
            # Delete the stacks
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter  here
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/BpDcbSg4F8M7GxaE6ytSdz/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
         #      Add revert code here. You can find this in the Getting Started section.
               npm run migration:revert
  
            fi
            
  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
  #   parameters:
  #     # Add parameter here 
  #     workflow_id:
  #         type: string
  #         default: ${CIRCLE_WORKFLOW_ID:0:7}    
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         when: on_fail
  #         command: |
  #           SUCCESS=$(curl --insecure https://kvdb.io/BpDcbSg4F8M7GxaE6ytSdz/migration_<< parameters.workflow_id >>)
  #           if (( $SUCCESS == 1 ));
  #           then
  #               cd ~/project/backend
  #               npm install
  #               npm run migration:revert
  #           fi          
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Revert Migration
#           when: on_fail
#           command: |
#        #   #   # Delete the S3 buckets. 
#           # name: Revert migrations
#           # # Add when this will run 
#           # when: on_fail
#           #    command: |

#           #   #command: |
#                SUCCESS=$(curl --insecure  https://kvdb.io/BpDcbSg4F8M7GxaE6ytSdz/migration_<< parameters.workflow_id >>)
#                if (( $SUCCESS == 1 ));
#                then
#                  cd ~/project/backend
#                  npm install
#                  npm run migration:revert
#                fi
# #           command: |
# #             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
# #             SUCCESS=$(curl -H "token: udapeople-cicd-migration-<<parameters.workflow_id>>" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>>)
# #             if(( $SUCCESS==1 )); 
# #             then
# #               cd ~/project/backend
# #               npm install
# #               # Add revert code here. You can find this in the Getting Started section.<done>
# #               npm run migrations:revert
# #             ficc

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend  
            npm install
            npm run build
            exit 0
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end audit
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: back-end audit
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum -y install tar gzip project3
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure that the back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt
            cat inventory.txt
      # - run:
      #     name: Save back-end url link
      #     command: |
      #       cd .circleci/ansible
      #       BackendURL=$(aws ec2 describe-instances \  
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --output text)
      #       echo "Backend URL": $BackendURL
      #       curl https://kvdb.io/BpDcbSg4F8M7GxaE6ytSdz/backend_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #     curl -H "Content-Type: text/plain" -H "token: udapeople-BackendURL-${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "http://$Backend_URL:3030" https://api.memstash.io/values/BackendURL
      # BpDcbSg4F8M7GxaE6ytSdz is my bucket created at kvdb
      # # - run:
      #     name: Install tar/gzip utility
      #     command: |
      #       yum -y install tar gzip
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c1:84:ec:3f:11:24:da:80:8d:61:1c:c6:c7:ae:ee:f6"]      # Added ssh keys with fingerprint
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cat /tmp/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  run-migrations:
    docker:
      - image: cimg/node:18.2.0
      # Docker image here that supports NodeJS
    steps:
        - checkout
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
           cd backend
           sudo apt-get update
           sudo apt-get install awscli
           npm install
           npm run migrations >> migrations_file.txt
      - run:
          name: Send migration results to kvdb gg bucket
          command: |
           cd backend
           if grep -q "has been executed successfully" migrations_file.txt
           then 
           curl https://kvdb.io/BpDcbSg4F8M7GxaE6ytSdz/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
           fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

     # Here's where you will add some code to rollback on failure   
  
  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #       - checkout
  #   - run:
  #          name: Run migrations
  #          command: |
  #           cd backend
  #           sudo apt-get update
  #           sudo apt-get install awscli
  #           npm install
  #           npm run migrations >> migrations_file.txt
  #   - run:
  #          name: send migration results to kvdb gg
  #         
  #          command: |
  #           cd backend
  #           if grep -q "has been executed successfully." migrations_file.txt
  #           then
  #            curl https://kvdb.io/BpDcbSg4F8M7GxaE6ytSdz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #            fi
    # - destroy-environment:
    #        workflow_id: ${CIRCLE_WORKFLOW_ID}
    #   # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      